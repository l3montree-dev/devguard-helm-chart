variables:
  HELM_VERSION: "3.19.0"
  CHART_NAME: "devguard"
  REGISTRY: "$CI_REGISTRY"

stages:
  - release

# Install Helm template
.install_helm: &install_helm
  - curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
  - chmod 700 get_helm.sh
  - ./get_helm.sh --version v${HELM_VERSION}
  - helm version

# Helm package and publish job
helm-release:
  stage: release
  image: alpine:3.22.1@sha256:4bcff63911fcb4448bd4fdacec207030997caf25e9bea4045fa6c8c44de311d1
  before_script:
    - apk add --no-cache curl git
    - *install_helm
    - echo $CI_REGISTRY_PASSWORD | helm registry login $CI_REGISTRY --username $CI_REGISTRY_USER --password-stdin
  script:
    # Extract version from tag or use default
    - |
      if [ -n "$CI_COMMIT_TAG" ]; then
        VERSION=${CI_COMMIT_TAG#v}
      else
        VERSION=$(grep '^version:' Chart.yaml | cut -d' ' -f2)
      fi
      echo "Releasing version: $VERSION"
    
    # Update Chart.yaml with the version
    - |
      sed -i "s/^version:.*/version: $VERSION/" Chart.yaml
      sed -i "s/^appVersion:.*/appVersion: \"$VERSION\"/" Chart.yaml
    
    # Package the chart
    - helm dependency update
    - mkdir -p charts
    - helm package . --destination ./charts/
    
    # Push to GitLab Container Registry
    - |
      CHART_PACKAGE="${CHART_NAME}-$VERSION.tgz"
      helm push "./charts/$CHART_PACKAGE" oci://$CI_REGISTRY/$CI_PROJECT_PATH
  
  artifacts:
    paths:
      - charts/*.tgz
    expire_in: 1 week
  
  rules:
    # Run on tags starting with 'v'
    - if: $CI_COMMIT_TAG =~ /^v.*/
    # Run manually
    - when: manual
      allow_failure: false
